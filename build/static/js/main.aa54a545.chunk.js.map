{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","Notification","message","Footer","style","color","fontStyle","fontSize","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","Date","toISOString","Math","random","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa54a545.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className = 'note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes' \r\n\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('a new note....')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState('Hello notes')\r\n\r\nuseEffect(() => {\r\n  noteService\r\n  .getAll()\r\n  .then(initialNotes => {//then -metodilla rekisteröidään tapahtumankuuntelija\r\n    setNotes(initialNotes)//tallettaa tilaan palvelimen palauttamat muistiinpanot\r\n  })\r\n}, [])\r\nconsole.log('render', notes.length, 'notes')\r\n\r\n/**\r\n * Lisätään uusi muistiinpano\r\n * @param {*} event \r\n */\r\n  const addNote = (event) => {\r\n    event.preventDefault()//estää sivun uudelleenlatautumisen\r\n    console.log('button clicked', event.target)\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString,\r\n      important: Math.random() > 0.5,\r\n    }\r\n\r\n    noteService\r\n    .create(noteObject)\r\n    .then(returnedNote => {\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n    })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)//target viittaa input-kenttään\r\n    setNewNote(event.target.value)//event.target.value viittaa inputin syötekentän arvoon.\r\n  }\r\n\r\n  /**\r\n   * Vaihdetaan muistiinpanon tärkeysarvoa\r\n   * @param {*} id \r\n   */\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }//{ ... note} luo olion, jolla on kenttinään kopiot olion note kenttien arvoista\r\n\r\n    noteService\r\n    .update(id, changedNote)\r\n    .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    /*\r\n    Operaatio siis luo uuden taulukon vanhan taulukon perusteella. \r\n    Jokainen uuden taulukon alkio luodaan ehdollisesti siten, että jos ehto note.id !== id on tosi, \r\n    otetaan uuteen taulukkoon suoraan vanhan taulukon kyseinen alkio. \r\n    Jos ehto on epätosi, eli kyseessä on muutettu muistiinpano, otetaan uuteen taulukkoon palvelimen palauttama olio.\r\n    */\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Eli jos tilan arvo showAll on epätosi, muuttuja notesToShow saa arvokseen \r\n   * vaan ne muistiinpanot, joiden important-kentän arvo on tosi.\r\n   */\r\n  const notesToShow = showAll\r\n  ? notes\r\n  : notes.filter(note => note.important === true)//filtteröidään notes, joiden tärkeys on true\r\n\r\n  const Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //INLINE-style, tyylin kirjoittaminen suoraan koodiin\r\n  const Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n  \r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={()=> setShowAll(!showAll)}>\r\n        show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => \r\n          <Note \r\n            key={note.id} \r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n             />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} \r\n        onChange = {handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>   \r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App ","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n//luo uuden taulukon, jossa notes.contentit\n//const result = notes.map(note=> note.content)\n//console.log(result)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}